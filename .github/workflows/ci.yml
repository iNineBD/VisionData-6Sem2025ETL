name: CI-Etl
on:
  pull_request:
    branches:
      - 'API-**'
      - develop
      - 'sprint-**'
      - main
  push:
    branches:
      - 'API-**'
      - develop
      - 'sprint-**'
      - main

permissions:
  contents: read

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Install deps (linters/formatters)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install black ruff flake8

      - name: Ruff (lint)
        run: ruff check .

      - name: Black (format check)
        run: black --check src

  build-and-test:
    needs: [lint-and-format]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Install deps (tests/build)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov build

      - name: Tests (with coverage)
        run: pytest --cov=src --cov-report=xml src/test -q --maxfail=1 --disable-warnings

      - name: Build (wheel/sdist)
        run: |
          if [ -f setup.py ] || [ -f pyproject.toml ]; then
            python -m pip install build
            python -m build
          else
            echo "No setup.py/pyproject.toml found, skipping build."
          fi

      - name: Pacote (tar.gz)
        run: |
          if [ -d dist ]; then
            tar -czf etl-py.tar.gz dist/
          else
            # fallback: package source
            tar -czf etl-py.tar.gz src/
          fi
          ls -lh etl-py.tar.gz

      - name: Upload artifact (package)
        uses: actions/upload-artifact@v4
        with:
          name: etl-py
          path: etl-py.tar.gz

      - name: Upload coverage for SonarQube
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  sonarqube:
    needs: [build-and-test]
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=src
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
