name: CD-Etl

on:
  workflow_run:
    workflows: ["CI-Etl"]
    types: [completed]
  workflow_dispatch: {}

env:
  PYTHON_VERSION: '3.11'
  TAG: ${{ github.sha }}

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  build-package:
    name: Build & Package (Python)
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint (optional - ignore if tools not installed)
        continue-on-error: true
        run: |
          if command -v flake8 >/dev/null 2>&1; then flake8 src || true; fi

      - name: Quick import smoke test
        run: |
          python - <<'PY'
          import os, sys
          print('Python OK, version:', sys.version)
          expected=["config","entities","process","services","utils"]
          missing=[d for d in expected if not os.path.isdir(os.path.join('src',d))]
          if missing:
              print('WARN: Missing folders:', missing)
          PY

      - name: Build package if pyproject or setup exists
        run: |
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            python -m pip install build
            python -m build
            echo "Built via build module."
          else
            echo "No pyproject.toml or setup.py found. Skipping build."
          fi

      - name: Empacotar fonte (tar)
        run: |
          TAR=pack-visiondata.tar.gz
          echo "Generating ${TAR}"
          # prefer including dist if present, otherwise include src and metadata
          if [ -d dist ]; then
            tar -czf ${TAR} dist/ src requirements.txt README.md 2>/dev/null || tar -czf ${TAR} dist/ src
          else
            tar -czf ${TAR} src requirements.txt README.md 2>/dev/null || tar -czf ${TAR} src
          fi
          ls -lh ${TAR}

      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: pack-visiondata
          path: pack-visiondata.tar.gz
          retention-days: 7

      - name: Upload wheel (if built)
        if: ${{ always() && (hashFiles('pyproject.toml') != '' || hashFiles('setup.py') != '') }}
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel
          path: dist/*.whl
          retention-days: 7

  deploy-dev:
    needs: [build-package]
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop' }}
    steps:
      - name: Download bundle
        uses: actions/download-artifact@v4
        with:
          name: pack-visiondata
          path: .
      - name: Deploy DEV (example)
        run: |
          echo "Unpacking package and simulating deploy to DEV"
          tar -xzf pack-visiondata.tar.gz
          ls -R src | head -50

  deploy-qa:
    needs: [build-package]
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'sprint-') }}
    steps:
      - name: Download bundle
        uses: actions/download-artifact@v4
        with:
          name: pack-visiondata
          path: .
      - name: Deploy QA (Homolog)
        run: |
          echo "Deploy QA/Homolog."
          tar -xzf pack-visiondata.tar.gz
          ls -R src | head -50

  deploy-staging:
    needs: [build-package]
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    steps:
      - name: Download bundle
        uses: actions/download-artifact@v4
        with:
          name: pack-visiondata
          path: .
      - name: Deploy Staging
        run: |
          echo "Deploy Staging."
          tar -xzf pack-visiondata.tar.gz
          ls -R src | head -50
